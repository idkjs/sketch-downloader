{"data":{"note":[{"id":"sbhQQPx64lXrk3hEwirKIS","title":"Functional Domain Modelling Workshop - new","data":{"lang": "RE", "links": [], "blocks": [{"id": "OKlDLF6ZNXP7Gs9VHKpLQa", "data": {"kind": "text", "value": "# Basic Building Blocks\n### Primitives"}, "deleted": false}, {"id": "Yk15JCxZiFe4uewgr9l5Si", "data": {"kind": "code", "value": "/* primitives (type alias) */\ntype name = string\ntype age = int\ntype size = float\ntype isAlive = bool\n\n\nlet a: int = 27\nlet a: age = 27\nlet a = 27\nlet a = 5.7;\n\n27;\n\n\"foo\";"}, "deleted": false}, {"id": "afPq3pMhfNRXuqby7NTfk2", "data": {"kind": "text", "value": "### Abstract Types\nimportant usage:\n 1. reduce implementation detail\n 2. model top-down"}, "deleted": false}, {"id": "pbqmCQfdRZ4moeQTeRjnRB", "data": {"kind": "code", "value": "type notYetSpecified;"}, "deleted": false}, {"id": "A1tqmlkdhVQJgsHshrG8ws", "data": {"kind": "text", "value": "# Algebraic Data Types (ADT)"}, "deleted": false}, {"id": "1zbJMO4FcX3pPG1UImX3Yd", "data": {"kind": "text", "value": "### Sum Types (OR) \n(also Variants, Unions)"}, "deleted": false}, {"id": "BMUnRAq4VMvtnUSeAbewdA", "data": {"kind": "code", "value": "type color = Red | Green | Blue | Yellow;\ntype shape = Circle | Rectangle;\n\n/* 4 possible Values (sum) */\nRed;"}, "deleted": false}, {"id": "KmW4jb4vyREq8ZBvjhEO2S", "data": {"kind": "text", "value": "### Product Types (AND)"}, "deleted": false}, {"id": "yYehsKGz3A0PVgIVCP9t2Q", "data": {"kind": "code", "value": "/* Product: Tuple */\ntype coordinate = (int, int);\ntype coloredShape = (color, shape);\n\n/* 4 Colors * 2 Shapes = 8 possible Values (product) */\n(Red, Circle);\n(7, 3)\n\n/* Product: Record */\ntype coloredShape = {shape, color};\n\n{shape: Circle, color: Red};\n{color: Green, shape: Rectangle};"}, "deleted": false}, {"id": "moaRnQJsEDwOiyjseUdR3L", "data": {"kind": "text", "value": "### Sum Type with Payload"}, "deleted": false}, {"id": "hTzKo319AuS7fgE8J0POpu", "data": {"kind": "code", "value": "/* Sum with Payload aka Type Constructors */\ntype shape = Circle(int) | Square(int, int);\n\nSquare(3, 4); /* (3) */\nCircle(4); /* (3, 4) */"}, "deleted": false}, {"id": "rQRaUUMn64NZph43jGnyzc", "data": {"kind": "text", "value": "### Primitive Anti-Pattern"}, "deleted": false}, {"id": "JDdcN4M9hzx3n7QTZJbyhq", "data": {"kind": "code", "value": "let durationToNextRoom = 10.0;\nlet wayToNextRoom = 5.0;\n\nlet speed = (way: float, time: float) => way /. time;\n\nspeed(durationToNextRoom, wayToNextRoom);"}, "deleted": false}, {"id": "e0LzjHHKErUcLtpL9guUs4", "data": {"kind": "text", "value": "### Tagged Types (Sum Type of 1)"}, "deleted": false}, {"id": "XTh02SS0Z02RR23q2BWZF4", "data": {"kind": "code", "value": "type secs = | Secs(float);\ntype meter = | Meter(float);\n\nlet speed = (Meter(m), Secs(s)) => m /. s;\n\nspeed(Meter(5.0), Secs(10.0));"}, "deleted": false}, {"id": "tVKXUR94GmRRjz8vccMsBv", "data": {"kind": "text", "value": "# Lists"}, "deleted": false}, {"id": "Bn8JO51veV4s8gfODAYqgV", "data": {"kind": "code", "value": "let x: list(shape) = [];\n\ntype simplePicture = { shape: list(shape),  backgroundColor: color};"}, "deleted": false}, {"id": "hPE33cbrTIKA2Fi68NY3O7", "data": {"kind": "text", "value": "# Functions"}, "deleted": false}, {"id": "dBL0tWHSw9N3osBPOctUpT", "data": {"kind": "code", "value": "type areaSize = shape => size\ntype add = (float, float) => float;"}, "deleted": false}, {"id": "ECenE21akCaKglv2upPrBy", "data": {"kind": "text", "value": "# Invariant Enforcement\n\nTennis Scoring Rules:\n* Player points: Love, 15, 30, 40\n* 40 points && win the ball ⇒ win game\n* both player 40 ⇒ players are deuce\n* deuce: the winner of a ball ⇒ advantage\n* advantage && wins the ball ⇒  win game\n* player without advantage wins ⇒ back at deuce"}, "deleted": false}, {"id": "Z3ExPrlLZt9ha2kK3SKuXh", "data": {"kind": "text", "value": "## 1st Try"}, "deleted": false}, {"id": "J8PTTIlpoVL6Csvcgb0Aua", "data": {"kind": "code", "value": "type points = int;\n\ntype score = {\n  playerOne: points,\n  playerTwo: points,\n};\n\nlet s = {\n  playerOne: 1000, /* 1000, -200 */\n  playerTwo: -15,\n};"}, "deleted": false}, {"id": "i1etCdhqdLAVIgJVRekAII", "data": {"kind": "text", "value": "## 2nd Try"}, "deleted": false}, {"id": "zlCXghBSmI8rkTuF1xXkvJ", "data": {"kind": "code", "value": "type points =\n  | Love\n  | Fifteen\n  | Thirty\n  | Forty;\n\ntype score = {\n  playerOne: points,\n  playerTwo: points,\n};\n\nlet s2 = {playerOne: Fifteen, playerTwo: Love};\nlet even = {playerOne: Forty, playerTwo: Forty};"}, "deleted": false}, {"id": "PeBlhLrh2f5nQ9kgOFmjz0", "data": {"kind": "text", "value": "## Better Solution"}, "deleted": false}, {"id": "7CFw6mKON8IhzvCyupz40M", "data": {"kind": "code", "value": "type player =\n  | PlayerOne\n  | PlayerTwo;\n\ntype points =\n  | Love\n  | Fifteen\n  | Thirty;\n\ntype score =\n  | Points(points, points)\n  | Forty(player, points /* of other player */)\n  | Deuce\n  | Advantage(player)\n  | Game(player);\n\nlet startScore: score = Points(Love, Love);\nlet anotherScore: score = Forty(PlayerTwo, Thirty);\nlet anotherScore2: score = Deuce;\nlet anotherScore3: score = Advantage(PlayerOne);\n\n/* \n let impossibleScore1: score = Points(Seven, Eleven);\n let impossibleScore2: score = Points(Forty, Forty);\n let impossibleScore3: score = Forty(PlayerTwo, Forty);\n */"}, "deleted": false}, {"id": "MZ2OfrkawR0WDIERtWTDxr", "data": {"kind": "text", "value": "# Optional, ie. Billion Dollar Mistake"}, "deleted": false}, {"id": "Cr43QJ6qo78z5qUivYX7ay", "data": {"kind": "code", "value": "/* type option('a) = None | Some('a); */\n\nlet reciprocal = x => x == 0.0 ? None : Some(1.0 /. x);\n\ntype name = Name(string);\ntype phone = Phone(string);\n\ntype customer = {\n  name,\n  phone: option(phone),\n};"}, "deleted": false}, {"id": "3MPRheV37E3pYMxbqVjhDa", "data": {"kind": "text", "value": "# Tactical Design Pattern and idioms"}, "deleted": false}, {"id": "vF5rmMnBmQvQ8JqKCFt8eO", "data": {"kind": "text", "value": "## Model Values explicitly!\nie. replace booleans with variants"}, "deleted": false}, {"id": "7PHljTR0lHt0B543a66zYr", "data": {"kind": "code", "value": "/* Don't */\n\nlet cellIsAlive: bool = true;\n\ntype livingState =\n  | ALIVE\n  | DEAD;\n/*  Do */\nlet cell = ALIVE;"}, "deleted": false}, {"id": "9EVA4Heqiv1Y20h7Adwdra", "data": {"kind": "text", "value": "## Smart Constructors\nhttps://github.com/ostera/reason-design-patterns/blob/master/patterns/smart-constructors.md"}, "deleted": false}, {"id": "AYLNSlhi8lVpozd6YDfq0W", "data": {"kind": "code", "value": "type name = Name(string); /* Business Contraint: Length < 20 */\n\ntype makeName = string => option(name);\nlet makeName: makeName = str => (str |> String.length < 20) ? Some(Name(str)) : None\n\nmakeName(\"Sven\");\n\nmakeName(\"Foo bar Foo bar Foo bar \");"}, "deleted": false}, {"id": "oMa3ZOyjoa4CLwl0gfWM8h", "data": {"kind": "text", "value": "## Model State Changes explicitly!\n * Move Runtime to Compile Time\n * Bool -> Type"}, "deleted": false}, {"id": "w6brMsr5textOItr5RGaoV", "data": {"kind": "code", "value": "/* Bad Idea */\ntype emailAdress = {\n  email: string,\n  verified: bool,\n};\n\n/* Better */\ntype unverifiedEmail =\n  | UnverifiedEmailAdress(string);\ntype verifiedEmail =\n  | VerifiedEmailAdress(string);\n\ntype email =\n  | UnverifiedEmailAdress(string)\n  | VerifiedEmailAdress(string);\n\ntype verifyEmail = unverifiedEmail => option(verifiedEmail);"}, "deleted": false}, {"id": "0Gq7HnHYJGgWsZWjgTLQ64", "data": {"kind": "text", "value": "## Model with Abstract Types;"}, "deleted": false}, {"id": "ZlXnMnTlCjRhebxty1XTCj", "data": {"kind": "code", "value": "type address;\n\ntype customer = {\n  name,\n  address,\n};"}, "deleted": false}, {"id": "pHSrejonMsky2X2kjM4oP0", "data": {"kind": "text", "value": "## Generics"}, "deleted": false}, {"id": "lNg0auLV8wNdQ6WE1qNAZZ", "data": {"kind": "code", "value": "type numberOfPlayers = | NumberOfPlayers(int);\ntype duration = Minutes(int) | Hours(int);\ntype boardgame = {numberOfPlayers: int, duration: duration};\n\ntype cover = Leather | Cardboard;\ntype notebooks = {numberOfPages: int, cover: cover};\n\ntype date;\ntype id;\n\ntype product('productKind) = {  \n  productId: id,\n  inShopSince: option(date),\n  productSpecificData: 'productKind,\n};\n\nlet productIdOf = product => product.productId;\n\nlet numberOfPlayersOf = product => product.productSpecificData.numberOfPlayers;"}, "deleted": false}]}}]}}